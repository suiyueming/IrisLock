package com.wcsn.irislock.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wcsn.irislock.bean.Monitor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MONITOR".
*/
public class MonitorDao extends AbstractDao<Monitor, Long> {

    public static final String TABLENAME = "MONITOR";

    /**
     * Properties of entity Monitor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property UserType = new Property(2, String.class, "userType", false, "USER_TYPE");
        public final static Property IsOut = new Property(3, boolean.class, "isOut", false, "IS_OUT");
        public final static Property Week = new Property(4, String.class, "week", false, "WEEK");
        public final static Property Image = new Property(5, String.class, "image", false, "IMAGE");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
    };


    public MonitorDao(DaoConfig config) {
        super(config);
    }
    
    public MonitorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MONITOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"USER_TYPE\" TEXT NOT NULL ," + // 2: userType
                "\"IS_OUT\" INTEGER NOT NULL ," + // 3: isOut
                "\"WEEK\" TEXT NOT NULL ," + // 4: week
                "\"IMAGE\" TEXT NOT NULL ," + // 5: image
                "\"TIME\" TEXT NOT NULL );"); // 6: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MONITOR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Monitor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getUserType());
        stmt.bindLong(4, entity.getIsOut() ? 1L: 0L);
        stmt.bindString(5, entity.getWeek());
        stmt.bindString(6, entity.getImage());
        stmt.bindString(7, entity.getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Monitor readEntity(Cursor cursor, int offset) {
        Monitor entity = new Monitor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // userType
            cursor.getShort(offset + 3) != 0, // isOut
            cursor.getString(offset + 4), // week
            cursor.getString(offset + 5), // image
            cursor.getString(offset + 6) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Monitor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setUserType(cursor.getString(offset + 2));
        entity.setIsOut(cursor.getShort(offset + 3) != 0);
        entity.setWeek(cursor.getString(offset + 4));
        entity.setImage(cursor.getString(offset + 5));
        entity.setTime(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Monitor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Monitor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
