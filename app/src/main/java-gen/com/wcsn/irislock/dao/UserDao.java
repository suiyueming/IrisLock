package com.wcsn.irislock.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wcsn.irislock.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property User_info = new Property(3, String.class, "user_info", false, "USER_INFO");
        public final static Property User_flag = new Property(4, String.class, "user_flag", false, "USER_FLAG");
        public final static Property Valid_time_start = new Property(5, String.class, "valid_time_start", false, "VALID_TIME_START");
        public final static Property Valid_time_stop = new Property(6, String.class, "valid_time_stop", false, "VALID_TIME_STOP");
        public final static Property Valid_time_week = new Property(7, String.class, "valid_time_week", false, "VALID_TIME_WEEK");
        public final static Property Register_time = new Property(8, String.class, "register_time", false, "REGISTER_TIME");
        public final static Property Iris_path = new Property(9, String.class, "iris_path", false, "IRIS_PATH");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT NOT NULL ," + // 1: user_id
                "\"USER_NAME\" TEXT NOT NULL ," + // 2: user_name
                "\"USER_INFO\" TEXT NOT NULL ," + // 3: user_info
                "\"USER_FLAG\" TEXT NOT NULL ," + // 4: user_flag
                "\"VALID_TIME_START\" TEXT NOT NULL ," + // 5: valid_time_start
                "\"VALID_TIME_STOP\" TEXT NOT NULL ," + // 6: valid_time_stop
                "\"VALID_TIME_WEEK\" TEXT NOT NULL ," + // 7: valid_time_week
                "\"REGISTER_TIME\" TEXT NOT NULL ," + // 8: register_time
                "\"IRIS_PATH\" TEXT NOT NULL );"); // 9: iris_path
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUser_id());
        stmt.bindString(3, entity.getUser_name());
        stmt.bindString(4, entity.getUser_info());
        stmt.bindString(5, entity.getUser_flag());
        stmt.bindString(6, entity.getValid_time_start());
        stmt.bindString(7, entity.getValid_time_stop());
        stmt.bindString(8, entity.getValid_time_week());
        stmt.bindString(9, entity.getRegister_time());
        stmt.bindString(10, entity.getIris_path());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // user_id
            cursor.getString(offset + 2), // user_name
            cursor.getString(offset + 3), // user_info
            cursor.getString(offset + 4), // user_flag
            cursor.getString(offset + 5), // valid_time_start
            cursor.getString(offset + 6), // valid_time_stop
            cursor.getString(offset + 7), // valid_time_week
            cursor.getString(offset + 8), // register_time
            cursor.getString(offset + 9) // iris_path
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.getString(offset + 1));
        entity.setUser_name(cursor.getString(offset + 2));
        entity.setUser_info(cursor.getString(offset + 3));
        entity.setUser_flag(cursor.getString(offset + 4));
        entity.setValid_time_start(cursor.getString(offset + 5));
        entity.setValid_time_stop(cursor.getString(offset + 6));
        entity.setValid_time_week(cursor.getString(offset + 7));
        entity.setRegister_time(cursor.getString(offset + 8));
        entity.setIris_path(cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
